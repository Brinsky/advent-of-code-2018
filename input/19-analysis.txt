#ip 3
(0) addi 3 16 3  [R3 += 16]*       // jump 17               // if (R0 == 0) {
(1) seti 1 _ 5   [R5 = 1]          // R5 = 1                //   R1 = 900
(2) seti 1 _ 4   [R4 = 1]          // R4 = 1                // } else {
(3) mulr 5 4 2   [R2 = R4 * R5]    // if (R4 * R5 == R1) {  //   R1 = 10551300
(4) eqrr 2 1 2   [R2 = (R1 == R2)] //   R0 += R5            // }
(5) addr 2 3 3   [R3 += R2]*       //                       // for (R5 = 1; R5 <= R1; R5++) {
(6) addi 3 1 3   [R3++]*           //                       //   for (R4 = 1; R4 <= R1; R4++) {
(7) addr 5 0 0   [R0 += R5]        // }                     //     if (R4 * R5 == R1) {
(8) addi 4 1 4   [R4++]            // R4++                  //       R0 += R5
(9) gtrr 4 1 2   [R2 = (R4 > R1)]  // if (R4 <= R1) {       //     }
(10) addr 3 2 3  [R3 += R2]*       //   goto 3              //   }
(11) seti 2 _ 3  [R3 = 2]*         // }                     // }
(12) addi 5 1 5  [R5++]            // R5++                  // exit
(13) gtrr 5 1 2  [R2 = (R5 > R1)]  // if (R5 <= R1) {       //
(14) addr 2 3 3  [R3 += R2]*       //   goto 2              // i.e. sum of factors of R1
(15) seti 1 _ 3  [R3 = 1]*         // }                     // for (R5 = 1; R5 <= R1; R5++) {
(16) mulr 3 3 3  [R3 *= R3]*       // exit (R3 = 256)       //   if (R1 % R5 == 0) {
(17) addi 1 2 1  [R1 += 2]         // R1 += 2               //     R0 += R5
(18) mulr 1 1 1  [R1 *= R1]        // R1 *= R1              //   }
(19) mulr 3 1 1  [R1 *= R3]        // R1 *= 19 * 11         // }
(20) muli 1 11 1 [R1 *= 11]        //                       
(21) addi 2 2 2  [R2 += 2]         // R2 += 2
(22) mulr 2 3 2  [R2 *= R3]        // R2 *= 22
(23) addi 2 20 2 [R2 += 20]        // R2 += 20
(24) addr 1 2 1  [R1 += R2]        // R1 += R2
(25) addr 3 0 3  [R3 += R0]*       // if (R0 == 0)
(26) seti 0 _ 3  [R3 = 0]*         //   goto 1
(27) setr 3 _ 2  [R2 = R3]         // R2 = 27
(28) mulr 2 3 2  [R2 *= R3]        // R2 *= 28
(29) addr 3 2 2  [R2 += R3]        // R2 += 29
(30) mulr 3 2 2  [R2 *= R3]        // R2 *= 30
(31) muli 2 14 2 [R2 *= 14]        // R2 *= 14
(32) mulr 2 3 2  [R2 *= R3]        // R2 *= 32
(33) addr 1 2 1  [R1 += R2]        // R1 += R2
(34) seti 0 _ 0  [R0 = 0]          // R0 = 0
(35) seti 0 _ 3  [R3 = 0]*         // goto 1